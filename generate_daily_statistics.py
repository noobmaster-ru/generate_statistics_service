# import pandas as pd
# from datetime import datetime, timedelta
# from plotly.subplots import make_subplots
# import plotly.graph_objects as go
# import qrcode
# import io
# import base64
# from loguru import logger


# def generate_daily_statistics(df_avg, df_weekly):
#     # logger.info(f"generate daily statisticss started")

#     # –°—Ä–µ–¥–Ω–∏–µ –ø–æ –±–æ—Ç—É
#     df_avg["date"] = pd.to_datetime(df_avg["date"])  # average_cabinet_info.csv

#     latest_date_avg = df_avg["date"].max()
#     this_week_avg = df_avg[df_avg["date"] > latest_date_avg - timedelta(days=7)]

#     this_week_avg = this_week_avg.copy()
#     this_week_avg["week"] = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"

#     this_week_avg["day"] = this_week_avg["date"].dt.strftime("%A")

#     # –¥–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç–∞

#     df = df_weekly  # cabinet_info.csv
#     df["date"] = pd.to_datetime(df["date"])
#     # logger.info(f"df is {df}")
#     latest_date = df["date"].max()
#     this_week = df[df["date"] > latest_date - timedelta(days=7)]

#     this_week = this_week.copy()
#     this_week["week"] = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"

#     this_week["day"] = this_week["date"].dt.strftime("%A")
#     # fig = go.Figure()
#     fig = make_subplots(
#         rows=3,
#         cols=1,
#         shared_xaxes=False,  # –æ–±—â–∏–π x-–æ—Å—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
#         vertical_spacing=0.03,  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
#         specs=[
#             [{"secondary_y": False}],
#             [{"secondary_y": False}],
#             [{"secondary_y": True}],
#         ],
#     )
#     # logger.info(f"fig is {fig}")
#     fig.add_trace(
#         go.Bar(
#             x=this_week_avg["day"],
#             y=this_week_avg["median_orders_sum_per_user"],
#             name="–ó–∞–∫–∞–∑—ã –°—Ä–µ–¥–Ω–∏–π –°–µ–ª–ª–µ—Ä –±–æ—Ç–∞",
#             # marker_color='lightslategrey',
#             text=this_week_avg["median_orders_sum_per_user"].round(1),
#             marker=dict(
#                 color="orange",
#                 pattern=dict(shape="\\", fgcolor="white", bgcolor="orange"),
#             ),
#         ),
#         row=1,
#         col=1,
#     )
#     # logger.info(f"fig after adding traces")

#     fig.add_trace(
#         go.Bar(
#             x=this_week["day"],
#             y=this_week["orders_sum_rub"],
#             name="–ó–∞–∫–∞–∑—ã –í–∞—à –∫–∞–±–∏–Ω–µ—Ç",
#             marker_color="crimson",
#             text=this_week["orders_sum_rub"],
#         ),
#         row=1,
#         col=1,
#     )
#     fig.update_traces(
#         texttemplate="%{text:.4s}",
#         textposition="inside",
#         marker=dict(cornerradius="20%"),
#     )

#     fig.add_trace(
#         go.Scatter(
#             x=this_week_avg["day"],
#             y=(this_week_avg["median_drr"] * 100),
#             marker_color="orange",
#             name="–î–†–† –°—Ä–µ–¥–Ω–∏–π –°–µ–ª–ª–µ—Ä –±–æ—Ç–∞",
#             mode="lines+markers+text",
#             text=(this_week_avg["median_drr"] * 100).round(2).astype(str) + "%",
#             textposition="bottom left",
#             textfont=dict(size=12),
#             line=dict(width=3, dash="longdash"),
#         ),
#         row=2,
#         col=1,
#     )

#     fig.add_trace(
#         go.Scatter(
#             x=this_week["day"],
#             y=(this_week["sum"] / this_week["orders_sum_rub"] * 100),
#             marker=dict(color="orangered", size=6),
#             name="–î–†–† –í–∞—à –∫–∞–±–∏–Ω–µ—Ç",
#             mode="lines+markers+text",
#             text=(this_week["sum"] / this_week["orders_sum_rub"] * 100)
#             .round(2)
#             .astype(str)
#             + "%",
#             textposition="bottom right",
#             textfont=dict(size=12),
#             line=dict(width=3),
#         ),
#         row=2,
#         col=1,
#     )

#     fig.add_trace(
#         go.Bar(
#             x=this_week_avg["day"],
#             y=this_week_avg["avg_orders_sum_per_user"],
#             name="–ó–∞–∫–∞–∑—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–≤—Ç–æ—Ç–∞–±–ª–∏—Ü",
#             text=this_week_avg["avg_orders_sum_per_user"].round(2),
#             marker=dict(
#                 color="yellowgreen",
#                 pattern=dict(shape="\\", fgcolor="white", bgcolor="yellowgreen"),
#             ),
#         ),
#         row=3,
#         col=1,
#     )

#     fig.add_trace(
#         go.Scatter(
#             x=this_week_avg["day"],
#             y=(this_week_avg["drr"] * 100),
#             marker=dict(color="dimgray", size=6),
#             name="–î–†–† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–≤—Ç–æ—Ç–∞–±–ª–∏—Ü",
#             mode="lines+markers+text",
#             text=(this_week_avg["drr"] * 100).round(2).astype(str) + "%",
#             textposition="bottom right",
#             textfont=dict(size=12),
#             line=dict(width=3),
#         ),
#         secondary_y=True,
#         row=3,
#         col=1,
#     )
#     # logger.info(f"fig after adding traces")
#     fig.update_yaxes(title_text="–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤", row=1, col=1)
#     fig.update_yaxes(title_text="–î–†–† (%)", row=2, col=1)
#     fig.update_yaxes(
#         title_text="–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ / –î–†–† (%)",
#         row=3,
#         col=1,
#         secondary_y=False,
#     )

#     qr = qrcode.QRCode(box_size=10, border=4)
#     qr.add_data("https://t.me/selleralarm_bot")
#     qr.make(fit=True)
#     img = qr.make_image(fill_color="black", back_color="white")

#     buffer = io.BytesIO()
#     img.save(buffer, format="PNG")
#     img_str = base64.b64encode(buffer.getvalue()).decode()

#     fig.add_layout_image(
#         dict(
#             source="data:image/png;base64," + img_str,
#             xref="paper",
#             yref="paper",
#             x=1.13,
#             y=0.132,
#             sizex=0.2,
#             sizey=0.2,
#             xanchor="center",
#             yanchor="middle",
#             layer="above",
#         )
#     )

#     fig.add_annotation(
#         dict(
#             x=1.13,
#             y=0.298,
#             xref="paper",
#             yref="paper",
#             text="–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏<br>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìä–ê–≤—Ç–æ-—Ç–∞–±–ª–∏—Ü!<br>–ö—Å—Ç–∞—Ç–∏, –æ–Ω–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã <br>–≤ –±–æ—Ç–µ! @selleralarm_bot",
#             showarrow=False,
#             font=dict(
#                 family="Montserrat, sans-serif",
#                 size=20,
#             ),
#             align="center",
#             xanchor="center",
#             yanchor="top",
#             borderwidth=1,
#             borderpad=4,
#             opacity=0.9,
#         )
#     )

#     current_date = datetime.now().strftime("%d/%m/%Y")
#     # logger.info(f"current date is {current_date}")
#     fig.update_layout(
#         height=1280,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞
#         width=1280,  # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞
#         title=dict(
#             text=f"–°—Ä–∞–≤–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥—Ä—É–≥–∏—Ö —Å–µ–ª–ª–µ—Ä–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é! –î–∞—Ç–∞:{current_date}"
#         ),
#         margin=dict(t=50, b=10),  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
#         bargap=0.1,  # gap between bars of adjacent location coordinates.
#         bargroupgap=0.05,  # gap between bars of the same location coordinate.
#     )

#     return fig


import pandas as pd
import matplotlib
matplotlib.use("Agg")  # <-- –æ—Ç–∫–ª—é—á–∞–µ—Ç GUI, –≤–∫–ª—é—á–∞–µ—Ç off-screen rendering
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib.patches as mpatches
import matplotlib.gridspec as gridspec
import qrcode
import io
import base64
from datetime import datetime, timedelta


def generate_daily_statistics(df): # –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –¥–ª—è daily —á–µ—Ä–µ–∑ matplotlib




    ## —ç—Ç–æ –≤—Å—ë —á–µ—Ä–µ–∑ plotly!!! –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ matplotlib
    df["date"] = pd.to_datetime(df["date"])
    # df["date"] = pd.to_datetime(df["date"])

    # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ:
    numeric_columns = ["orders_sum_rub", "sum", "cliks", "views"]
    for col in numeric_columns:
        df[col] = pd.to_numeric(df[col], errors="coerce")

    latest_date = df["date"].max()
    this_week = df[df["date"] > latest_date - timedelta(days=7)].copy()
    last_week = df[(df["date"] <= latest_date - timedelta(days=7)) & (df["date"] > latest_date - timedelta(days=14))].copy()

    this_week["week"] = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"
    last_week["week"] = "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è"

    ordered_days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    ru_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    day_map = dict(zip(ordered_days, ru_days))

    this_week["day"] = pd.Categorical(this_week["date"].dt.strftime("%A"), categories=ordered_days, ordered=True)
    last_week["day"] = pd.Categorical(last_week["date"].dt.strftime("%A"), categories=ordered_days, ordered=True)

    this_week.sort_values("day", inplace=True)
    last_week.sort_values("day", inplace=True)

    x = [day_map[d] for d in ordered_days]

    fig = plt.figure(figsize=(12, 14))
    gs = gridspec.GridSpec(3, 2, width_ratios=[4, 1], height_ratios=[1, 1, 1])
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[1, 0])
    ax3 = fig.add_subplot(gs[2, 0])

    # --- Plot 1: Orders ---
    ax1.bar(x, last_week["orders_sum_rub"], label="–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", color="lightslategrey")
    ax1.bar(x, this_week["orders_sum_rub"], label="–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", color="crimson", alpha=0.7)
    ax1.set_title("–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤")
    ax1.legend()
    ax1.set_ylabel("–°—É–º–º–∞")

    # --- Plot 2: DRR ---
    drr_last = (last_week["sum"] / last_week["orders_sum_rub"] * 100).values
    drr_this = (this_week["sum"] / this_week["orders_sum_rub"] * 100).values
    ax2.plot(x, drr_last, label="–î–†–† –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", linestyle="--", color="gray")
    ax2.plot(x, drr_this, label="–î–†–† –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", color="orangered")
    ax2.set_title("–î–†–† (%)")
    ax2.set_ylabel("%")
    ax2.legend()

    # --- Plot 3: CTR ---
    ctr_last = (last_week["cliks"] / last_week["views"] * 100).values
    ctr_this = (this_week["cliks"] / this_week["views"] * 100).values
    ax3.plot(x, ctr_last, label="CTR –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", linestyle="--", color="gray")
    ax3.plot(x, ctr_this, label="CTR –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", color="orangered")
    ax3.set_title("CTR (%)")
    ax3.set_ylabel("%")
    ax3.legend()

    for ax in [ax1, ax2, ax3]:
        ax.set_xticks(range(len(x)))
        ax.set_xticklabels(x, fontsize=12)
        ax.grid(True, linestyle='--', alpha=0.5)

    # --- QR Code ---
    qr = qrcode.QRCode(box_size=2, border=2)
    qr.add_data("https://t.me/selleralarm_bot")
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    qr_img = plt.imread(buf)

    ax_qr = fig.add_subplot(gs[:, 1])
    ax_qr.imshow(qr_img)
    ax_qr.axis('off')
    ax_qr.set_title("@selleralarm_bot", fontsize=12)

    current_date = datetime.now().strftime("%d/%m/%Y")
    fig.suptitle(f"–û–û–û –°–∏–≥–º–∞ –ï–∫–æ–º: –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è VS –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ¬∑ {current_date}", fontsize=16)
    fig.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.close(fig)
    return fig