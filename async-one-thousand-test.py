import aiohttp
import asyncio
import os
import time
import csv
import base64
import json

from constants import SEMAPHORE_LIMIT, CABINET_DIR, RESULTS_DIR, URL
# SEMAPHORE_LIMIT = 7

# cabinet_dir = "cabinet_data_samples"
# results_dir = "results_100"
# url = "http://localhost:8050/get-image-weekly"




def get_unique_csv_path(base_dir, base_filename="request_stats.csv"):
    base_path = os.path.join(base_dir, base_filename)
    if not os.path.exists(base_path):
        return base_path

    name, ext = os.path.splitext(base_filename)
    index = 1
    while True:
        new_filename = f"{name}_{index}{ext}"
        new_path = os.path.join(base_dir, new_filename)
        if not os.path.exists(new_path):
            return new_path
        index += 1




"""send_request(
    session: aiohttp.ClientSession(),
    file_path: chunk_*.csv,
    index: index of chunk_*.csv
"""
async def send_request(session, file_path, index):
    async with semaphore:
        start = time.perf_counter()
        success = False
        error_message = ""
        try:
            # —á—Ç–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ chunk_*.csv –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            with open(file_path, "rb") as f:
                data = {
                    "token_id": "123",
                    "supplier_id": "21341",
                    "cabinet_name": "test_cabinet",
                }
                form = aiohttp.FormData() # —ç–∫–∑–µ–º–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏  HTTP –∑–∞–ø—Ä–æ—Å–∞
                
                # c 57 –ø–æ 64 —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ–º  –ø–æ–ª—è –∫ –∑–∞–ø—Ä–æ—Å—É
                form.add_field(
                    "file",
                    f,
                    filename=os.path.basename(file_path),
                    content_type="text/csv",
                )
                for k, v in data.items():
                    form.add_field(k, v)
                

                # –æ—Ç–ø—Ä—è–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å POST –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç FASTapi –Ω–∞—à–µ–≥–æ 
                async with session.post(URL, data=form) as resp:
                    if resp.status == 200:
                        json_resp = await resp.json()
                        base64_img = json_resp.get("image_base64")
                        if base64_img:
                            img_bytes = base64.b64decode(base64_img)
                            filename = f"{RESULTS_DIR}/weekly-stat-{index}.png"
                            with open(filename, "wb") as out:
                                out.write(img_bytes)
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {filename}")
                            success = True
                        else:
                            error_message = "‚ùå –ù–µ—Ç –ø–æ–ª—è 'image_base64' –≤ –æ—Ç–≤–µ—Ç–µ"
                    else:
                        error_message = f"HTTP {resp.status}"
        except Exception as e:
            error_message = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {index}: {e}")


        # –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
        duration = time.perf_counter() - start
        request_stats.append(
            {
                "index": index,
                "file": os.path.basename(file_path),
                "success": success,
                "duration_sec": round(duration, 4),
                "error": error_message,
            }
        )


async def main():
    files = sorted(
        [
            os.path.join(CABINET_DIR, f)
            for f in os.listdir(CABINET_DIR)
            if f.endswith(".csv")
        ]
    )[:100] # –ø–µ—Ä–≤—ã–µ 100 —Ñ–∞–π–ª–æ–≤ chunk_*.csv


    # —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –¥–ª—è 100 —Ñ–∞–π–ª–æ–≤
    os.makedirs(RESULTS_DIR, exist_ok=True)

    start_time = time.perf_counter()


    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∏–∑ cabinet_data_samples
    async with aiohttp.ClientSession() as session:
        await asyncio.gather(
            *[
                send_request(session, file_path, idx + 1)
                for idx, file_path in enumerate(files)
            ]
        )

    end_time = time.perf_counter()
    total_time = end_time - start_time
    success_count = sum(1 for r in request_stats if r["success"])
    fail_count = len(request_stats) - success_count
    speed = success_count / total_time if total_time > 0 else 0

    # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {fail_count}")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")

if __name__ == "__main__":
    request_stats = []
    semaphore = asyncio.Semaphore(SEMAPHORE_LIMIT)
    asyncio.run(main())
